% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OptimizerChain.R
\name{mlr_optimizers_chain}
\alias{mlr_optimizers_chain}
\alias{OptimizerChain}
\title{Run Optimizers Sequentially}
\description{
\code{OptimizerChain} allows to run different \link{Optimizer}s sequentially.

For each \link{Optimizer} an (optional) additional \link{Terminator} can be specified
during construction.

The optimization then works as follows:
The first \link{Optimizer} is run on the \link{OptimInstance} using a \link{TerminatorCombo}
of the original \link{Terminator} of the \link{OptimInstance} and the (optional)
additional \link{Terminator} as passed during construction.
Once this \link{TerminatorCombo} indicates termination (usually via the
additional \link{Terminator}), the second \link{Optimizer} (and so on) is run unless
the original \link{Terminator} of the \link{OptimInstance} indicates termination.

\link{OptimizerChain} can also be used for random restarts of the same
\link{Optimizer} (if applicable) by setting the \link{Terminator} of the \link{OptimInstance} to
\link{TerminatorNone} and setting identical additional \link{Terminator}s during
construction.
}
\section{Dictionary}{

This \link{Optimizer} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary}
\link{mlr_optimizers} or with the associated sugar function \code{\link[=opt]{opt()}}:\preformatted{mlr_optimizers$get("chain")
opt("chain")
}
}

\section{Parameters}{

Parameters are inherited from the individual \link{Optimizer}s and collected as a
\link[paradox:ParamSetCollection]{paradox::ParamSetCollection} (with \code{set_id}s potentially postfixed via \verb{_1}, \verb{_2},
..., if the same \link{Optimizer}s are used multiple times).
}

\section{Progress Bars}{

\verb{$optimize()} supports progress bars via the package \CRANpkg{progressr}
combined with a \link{Terminator}. Simply wrap the function in
\code{progressr::with_progress()} to enable them. We recommend to use package
\CRANpkg{progress} as backend; enable with \code{progressr::handlers("progress")}.
}

\examples{
library(paradox)

domain = ParamSet$new(list(ParamDbl$new("x", lower = -1, upper = 1)))

search_space = ParamSet$new(list(ParamDbl$new("x", lower = -1, upper = 1)))

codomain = ParamSet$new(list(ParamDbl$new("y", tags = "minimize")))

objective_function = function(xs) {
 list(y = as.numeric(xs)^2)
}

objective = ObjectiveRFun$new(
 fun = objective_function,
 domain = domain,
 codomain = codomain
)

terminator = trm("evals", n_evals = 10)

instance = OptimInstanceSingleCrit$new(
objective = objective,
search_space = search_space,
terminator = terminator
)

optimizer = opt("chain",
 optimizers = list(opt("random_search"), opt("grid_search")),
 terminators = list(trm("evals", n_evals = 5), trm("evals", n_evals = 5))
)

optimizer$optimize(instance)

# random restarts
instance$archive$clear()  # reset instance
instance$terminator = trm("none")
optimizer = opt("chain",
 optimizers = list(opt("gensa"), opt("gensa")),
 terminators = list(trm("evals", n_evals = 10), trm("evals", n_evals = 10))
)
optimizer$optimize(instance)
}
\section{Super class}{
\code{\link[bbotk:Optimizer]{bbotk::Optimizer}} -> \code{OptimizerChain}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{OptimizerChain$new()}}
\item \href{#method-clone}{\code{OptimizerChain$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="format">}\href{../../bbotk/html/Optimizer.html#method-format}{\code{bbotk::Optimizer$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="optimize">}\href{../../bbotk/html/Optimizer.html#method-optimize}{\code{bbotk::Optimizer$optimize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="print">}\href{../../bbotk/html/Optimizer.html#method-print}{\code{bbotk::Optimizer$print()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerChain$new(
  optimizers,
  terminators = rep(list(NULL), length(optimizers))
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{optimizers}}{(list of \link{Optimizer}s).}

\item{\code{terminators}}{(list of \link{Terminator}s | NULL).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerChain$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
